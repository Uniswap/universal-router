import { RouterPlanner, X2Y2Command } from '@uniswap/narwhal-sdk'
import { TransactionReceipt } from '@ethersproject/abstract-provider'
import { Interface, LogDescription } from '@ethersproject/abi'
import { Router } from '../../typechain'
import { resetFork, DYSTOMICE_NFT } from './shared/mainnetForkHelpers'
import {
  ALICE_ADDRESS,
  DEADLINE,
  V2_FACTORY_MAINNET,
  V3_FACTORY_MAINNET,
  V2_INIT_CODE_HASH_MAINNET,
  V3_INIT_CODE_HASH_MAINNET,
} from './shared/constants'
import snapshotGasCost from '@uniswap/snapshot-gas-cost'
import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers'
import hre from 'hardhat'
import { expect } from 'chai'
import fetch from "node-fetch";
const { ethers } = hre

function parseEvents(iface: Interface, receipt: TransactionReceipt): (LogDescription | undefined)[] {
    return receipt.logs
      .map((log: { topics: Array<string>; data: string }) => {
        try {
          return iface.parseLog(log)
        } catch (e) {
          return undefined
        }
      })
      .filter((n: LogDescription | undefined) => n)
}

const TRANSFER_EVENT = new Interface([
    'event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)',
  ])

describe('X2Y2', () => {
  let alice: SignerWithAddress
  let router: Router
  let planner: RouterPlanner
  const X2Y2_API_KEY = "";

//   const encodedOrder = '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000004d3b2cb1f337000000000000000000000000000000000000000000000000000000006334c7d200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cbbe2a5c3a22be749d5ddf24e9534f98951983e20000000000000000000000000000000000000000000000000000000000000000aa150314684e2d04074e38af96c367f0314d106c92f9b277306d75a491fe1c212dc49d5116f22ee65859b08073690ebbc1b2ed50b4fb7935ed689e3105426b1f000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000047f67d1e1552334d404c80f5cbef820000000000000000000000000d4f16530fbcd336b4f0d4d1717487a65098be7cd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000063ea6d9e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c09d2388f6e390220f9d861cf0d793c77ef44bd8d97897b12c36ace9931acd72a5395fc36d3f1c5500e050ed703f7112a01e99295a093424a1a2fa66930e24a995000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000494654067e10000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000057f1887a8bf19b14fc0df6fd9b2acc9af147ea850e2d28628b4a177f893b3c31e4f64a3fefc6cfa562ec3c71867725934686fb26000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000494654067e10000fe98b8bf04d1bc66dd380d36c901fa2c5b2ec3097b59729fcdb29dee694c6fbe000000000000000000000000f849de01b080adc3a814fabe1e2087475cf2ed823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd'

  // const x2y2interface = new ethers.utils.Interface(LOOKS_RARE_ABI)

  beforeEach(async () => {
    // in beforeEach not afterEach as these tests use a different block
    await resetFork()

    await hre.network.provider.request({
      method: 'hardhat_impersonateAccount',
      params: [ALICE_ADDRESS],
    })
    alice = await ethers.getSigner(ALICE_ADDRESS)

    const routerFactory = await ethers.getContractFactory('Router')
    router = (
      await routerFactory.deploy(
        ethers.constants.AddressZero,
        V2_FACTORY_MAINNET,
        V3_FACTORY_MAINNET,
        V2_INIT_CODE_HASH_MAINNET,
        V3_INIT_CODE_HASH_MAINNET
      )
    ).connect(alice) as Router
    planner = new RouterPlanner()

  })

  it('reverts if order does not go through', async () => {
    // expect(router.address).to.be.eq('0xCBBe2A5c3A22BE749D5DDF24e9534f98951983e2')

    const price = '330000000000000000'
    const tokenId = '6412166724678289871743717335944131474762824270526419296462192909998329625382'
    const nftAddress = '0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85'

    const postResponse = await fetch(
        "https://api.x2y2.org/api/orders/sign",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-API-KEY": X2Y2_API_KEY,
          },
          body: JSON.stringify({
            caller: router.address,
            op: 1,
            amountToEth: "0",
            amountToWeth: "0",
            items: [
              {
                orderId: '9002704',
                currency: "0x0000000000000000000000000000000000000000",
                price,
                tokenId
              },
            ],
          }),
        }
    );
    const postJson = await postResponse.json();
    const signedOrder = postJson.data[0];
    // 0x357a150b is the function selector for run(...)
    const calldata = "0x357a150b" + signedOrder.input.slice(2);
    
    console.log(router.address)
    
    planner.add(X2Y2Command(price, calldata, ALICE_ADDRESS, nftAddress, tokenId))
    const { commands, state } = planner.plan()

    
    const tx = await router.execute(DEADLINE, commands, state, { value: price })
    const receipt = await tx.wait()
    const events = parseEvents(TRANSFER_EVENT, receipt)
    console.log(events)
    
  })


})
